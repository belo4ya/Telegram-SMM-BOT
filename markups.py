from aiogram import types


def main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    keyboard.row('–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç', '–ú–æ–∏ –ø–æ—Å—Ç—ã')
    keyboard.row('–ê—Ä—Ö–∏–≤ –ø–æ—Å—Ç–æ–≤', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    return keyboard


def back_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    keyboard.add('üîô–ù–∞–∑–∞–¥')
    return keyboard


def edit_header_keyboard(data):
    keyboard = types.InlineKeyboardMarkup()
    if data['channels']:
        channels = types.InlineKeyboardButton(text='‚úÖ–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã', callback_data='edit_channels')
    else:
        channels = types.InlineKeyboardButton(text='‚ùå–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã', callback_data='add_channels')
    if data['count']:
        count = types.InlineKeyboardButton(text='‚úÖ–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π', callback_data='edit_count')
    else:
        count = types.InlineKeyboardButton(text='‚ùå–î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π', callback_data='add_count')
    if data['interval']:
        interval = types.InlineKeyboardButton(text='‚úÖ–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª', callback_data='edit_interval')
    else:
        interval = types.InlineKeyboardButton(text='‚ùå–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª', callback_data='add_interval')

    keyboard.add(channels)
    keyboard.add(count)
    keyboard.add(interval)
    return keyboard


def edit_post_keyboard(data):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    if data['img']:
        img = types.InlineKeyboardButton(text='–û—Ç–∫—Ä–µ–ø–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É', callback_data='del_img')
    else:
        img = types.InlineKeyboardButton(text='–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É', callback_data='add_img')

    if data['urls']:
        urls = []
        for btn in data['urls'].inline_keyboard:
            urls.append(types.InlineKeyboardButton(text=btn[0].text, url=btn[0].url))
        for btn in urls:
            keyboard.add(btn)
        url = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å URL-–∫–Ω–æ–ø–∫–∏', callback_data='del_url')
    else:
        url = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å URL-–∫–Ω–æ–ø–∫–∏', callback_data='add_url')

    if not (data['channels'] and data['count'] and data['interval']):
        keyboard.add(img, url)
        return keyboard

    if data['time_start']:
        delay = types.InlineKeyboardButton(text=data['time_start'].strftime('%H:%M %d.%m.%y'),
                                           callback_data='del_delay')
    else:
        delay = types.InlineKeyboardButton(text='–û—Ç–ª–æ–∂–∏—Ç—å', callback_data='add_delay')

    save = types.InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save')
    run = types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–∏—Ç—å', callback_data='run')
    delete = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='del')

    keyboard.add(img, url, delay)

    if not data['time_start']:
        keyboard.add(save)

    keyboard.add(run, delete)
    return keyboard


def action_post_keyboard(data):
    keyboard = types.InlineKeyboardMarkup()
    run = types.InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–∏—Ç—å', callback_data='run')
    stop = types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data='stop')
    delete = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='del')

    if data['urls']:
        urls = []
        for btn in data['urls'].inline_keyboard:
            urls.append(types.InlineKeyboardButton(text=btn[0].text, url=btn[0].url))
        for btn in urls:
            keyboard.add(btn)

    if data['flag'] == 'sleep':
        keyboard.add(run)
    elif data['flag'] in ['delay', 'work']:
        keyboard.add(stop)

    keyboard.add(delete)
    return keyboard
